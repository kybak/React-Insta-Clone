{"ast":null,"code":"import _classCallCheck from \"/home/kyle/projects/lambda-school/React-Insta-Clone/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/kyle/projects/lambda-school/React-Insta-Clone/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/kyle/projects/lambda-school/React-Insta-Clone/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/kyle/projects/lambda-school/React-Insta-Clone/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/kyle/projects/lambda-school/React-Insta-Clone/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/kyle/projects/lambda-school/React-Insta-Clone/src/components/PostContainer/PostsPage.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport SearchBar from \"../SearchBar/SearchBar\";\nimport PostContainer from \"./PostContainer\";\nimport dummyData from '../../data/dummy-data';\n\nvar PostsPage =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(PostsPage, _Component);\n\n  function PostsPage() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, PostsPage);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(PostsPage)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      posts: []\n    };\n\n    _this.addComment = function (e, id, comment) {\n      if (e.keyCode == 13) {\n        var username = localStorage.getItem('userName');\n        var posts = _this.state.posts,\n            ind = posts.findIndex(function (p) {\n          return p.id === id;\n        });\n        posts[ind].comments.push({\n          username: username,\n          text: comment\n        });\n\n        _this.setState({\n          posts: posts\n        });\n      }\n    };\n\n    _this.like = function (id) {\n      var posts = _this.state.posts;\n      var ind = posts.findIndex(function (p) {\n        return p.id === id;\n      });\n      if (ind > -1) posts[ind].likes++;\n\n      _this.setState(function () {\n        return {\n          posts: posts\n        };\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(PostsPage, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.setState(function () {\n        return {\n          posts: dummyData\n        };\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var posts = this.state.posts;\n      return React.createElement(React.Fragment, null, React.createElement(SearchBar, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }), posts.map(function (post) {\n        return React.createElement(PostContainer, {\n          key: post.id,\n          post: post,\n          addComment: _this2.addComment,\n          like: _this2.like,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 42\n          },\n          __self: this\n        });\n      }));\n    }\n  }]);\n\n  return PostsPage;\n}(Component);\n\nexport default PostsPage;","map":{"version":3,"sources":["/home/kyle/projects/lambda-school/React-Insta-Clone/src/components/PostContainer/PostsPage.js"],"names":["React","Component","PropTypes","SearchBar","PostContainer","dummyData","PostsPage","state","posts","addComment","e","id","comment","keyCode","username","localStorage","getItem","ind","findIndex","p","comments","push","text","setState","like","likes","map","post"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,SAAP,MAAsB,uBAAtB;;IAEMC,S;;;;;;;;;;;;;;;;;UACFC,K,GAAQ;AACJC,MAAAA,KAAK,EAAE;AADH,K;;UAQRC,U,GAAa,UAACC,CAAD,EAAIC,EAAJ,EAAQC,OAAR,EAAoB;AAC7B,UAAIF,CAAC,CAACG,OAAF,IAAa,EAAjB,EAAqB;AACjB,YAAMC,QAAQ,GAAGC,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAjB;AAEA,YAAIR,KAAK,GAAG,MAAKD,KAAL,CAAWC,KAAvB;AAAA,YAA8BS,GAAG,GAAGT,KAAK,CAACU,SAAN,CAAgB,UAAAC,CAAC;AAAA,iBAAIA,CAAC,CAACR,EAAF,KAASA,EAAb;AAAA,SAAjB,CAApC;AACAH,QAAAA,KAAK,CAACS,GAAD,CAAL,CAAWG,QAAX,CAAoBC,IAApB,CAAyB;AAACP,UAAAA,QAAQ,EAAEA,QAAX;AAAqBQ,UAAAA,IAAI,EAAEV;AAA3B,SAAzB;;AACA,cAAKW,QAAL,CAAc;AAACf,UAAAA,KAAK,EAAEA;AAAR,SAAd;AACH;AAEJ,K;;UAEDgB,I,GAAO,UAAAb,EAAE,EAAI;AACX,UAAIH,KAAK,GAAG,MAAKD,KAAL,CAAWC,KAAvB;AACA,UAAMS,GAAG,GAAGT,KAAK,CAACU,SAAN,CAAgB,UAAAC,CAAC;AAAA,eAAIA,CAAC,CAACR,EAAF,KAASA,EAAb;AAAA,OAAjB,CAAZ;AACA,UAAIM,GAAG,GAAG,CAAC,CAAX,EAAcT,KAAK,CAACS,GAAD,CAAL,CAAWQ,KAAX;;AACd,YAAKF,QAAL,CAAc;AAAA,eAAO;AAACf,UAAAA,KAAK,EAAEA;AAAR,SAAP;AAAA,OAAd;AACD,K;;;;;;;wCApBmB;AAChB,WAAKe,QAAL,CAAc;AAAA,eAAO;AAACf,UAAAA,KAAK,EAAEH;AAAR,SAAP;AAAA,OAAd;AACH;;;6BAoBQ;AAAA;;AAAA,UACEG,KADF,GACW,KAAKD,KADhB,CACEC,KADF;AAGL,aACI,0CACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAEKA,KAAK,CAACkB,GAAN,CAAU,UAAAC,IAAI,EAAI;AACf,eACI,oBAAC,aAAD;AAAe,UAAA,GAAG,EAAEA,IAAI,CAAChB,EAAzB;AAA6B,UAAA,IAAI,EAAEgB,IAAnC;AAAyC,UAAA,UAAU,EAAE,MAAI,CAAClB,UAA1D;AAAsE,UAAA,IAAI,EAAE,MAAI,CAACe,IAAjF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAGH,OAJA,CAFL,CADJ;AAUH;;;;EAxCmBvB,S;;AA4CxB,eAAeK,SAAf","sourcesContent":["import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport SearchBar from \"../SearchBar/SearchBar\";\nimport PostContainer from \"./PostContainer\";\nimport dummyData from '../../data/dummy-data'\n\nclass PostsPage extends Component {\n    state = {\n        posts: []\n    };\n\n    componentDidMount() {\n        this.setState(() => ({posts: dummyData}));\n    }\n\n    addComment = (e, id, comment) => {\n        if (e.keyCode == 13) {\n            const username = localStorage.getItem('userName');\n\n            let posts = this.state.posts, ind = posts.findIndex(p => p.id === id);\n            posts[ind].comments.push({username: username, text: comment});\n            this.setState({posts: posts})\n        }\n\n    };\n\n    like = id => {\n      let posts = this.state.posts;\n      const ind = posts.findIndex(p => p.id === id);\n      if (ind > -1) posts[ind].likes++;\n      this.setState(() => ({posts: posts}));\n    };\n\n    render() {\n        const {posts} = this.state;\n\n        return (\n            <>\n                <SearchBar/>\n                {posts.map(post => {\n                    return (\n                        <PostContainer key={post.id} post={post} addComment={this.addComment} like={this.like}/>\n                    )\n                })}\n            </>\n        );\n    }\n}\n\n\nexport default PostsPage;\n"]},"metadata":{},"sourceType":"module"}